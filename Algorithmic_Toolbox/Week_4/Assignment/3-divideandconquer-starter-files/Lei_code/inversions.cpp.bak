#include <iostream>
#include <vector>

using std::vector;
using std::swap;

long long get_number_of_inversions(vector<int> &a, vector<int> &b, size_t left, size_t right) {
  long long number_of_inversions = 0;
  if (right <= left + 1) return number_of_inversions;
  size_t ave = left + (right - left) / 2;
  number_of_inversions += get_number_of_inversions(a, b, left, ave);
  number_of_inversions += get_number_of_inversions(a, b, ave, right);
  //write your code here
  vector<int> d(right - left);
  size_t a_left = left;
  size_t a_right = ave;
  size_t b_left = ave;
  size_t b_right = right;

  while (a_left < a_right && b_left < b_right)
  {
	  if (a[a_left] <= b[b_left])
	  {
		  d.push_back(a[a_left]);
		  a_left ++;
	  }
	  else
	  {
		  d.push_back(b[b_left]);
		  b_left ++;
		  number_of_inversions = number_of_inversions + a_right - a_left;
	  }
  }
  while (a_left < a_right)
  {
	  d.push_back(a[a_left]);
	  a_left ++;
  }
  while (b_left < b_right)
  {
	  d.push_back(b[b_left]);
	  b_left ++;
  }
  for (size_t i = left; i < right; i ++)
  {
	  a[i] = d[i - left];
  }
  return number_of_inversions;
}

int main() {
  int n;
  std::cin >> n;
  vector<int> a(n);
  for (size_t i = 0; i < a.size(); i++) {
    std::cin >> a[i];
  }
  vector<int> b(a.size());
  std::cout << get_number_of_inversions(a, b, 0, a.size()) << '\n';
}
